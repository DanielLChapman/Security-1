/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Rusty-Mac
 */
import java.math.BigInteger;

public class Security extends javax.swing.JFrame {

    /**
     * Creates new form Security
     */
    static String output = "";
    static long IV = 2;
    private static int[] key = new int[4];

    public Security() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        go = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputBox = new javax.swing.JTextArea();
        jToggleButton1 = new javax.swing.JToggleButton();
        input = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        go.setText("jButton1");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        outputBox.setColumns(20);
        outputBox.setRows(5);
        jScrollPane1.setViewportView(outputBox);

        jToggleButton1.setText("jToggleButton1");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        input.setText("jTextField1");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(input)
                    .add(jScrollPane1)
                    .add(layout.createSequentialGroup()
                        .add(72, 72, 72)
                        .add(go)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 79, Short.MAX_VALUE)
                        .add(jToggleButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(go)
                    .add(jToggleButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(input, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static long[] encode(final long v[]) {
        long[] a = v;
        a[0] = a[0] ^ IV;
        a[1] = a[1] ^ IV;
        a = encipher(a);
        IV = a[0];
        return a;
    }
    private static long[] decode(final long v[]) {
        long[] a = v;
        a = decipher(a);
        return a;
    }

    public static String toHex(String arg) {
        return String.format("%x",
                new BigInteger(arg.getBytes(/* YOUR_CHARSET? */)));
    }

    public static String fromHex(String hex) {
        StringBuilder output = new StringBuilder();
        for (int i = 0; i < hex.length(); i += 2) {
            String str = hex.substring(i, i + 2);
            output.append((char) Integer.parseInt(str, 16));
        }
        return output.toString();
    }

    private static long[] encipher(final long v[]) {
        int delta = 0x9e3779B9;
        int sum = 0;
        int x = 0;
        int IV1 = 2, IV2 = 2;
        // while (x < v.length) {
        long a = v[0], b = v[1];
        long L = a;// ^ IV1;
        long R = b;// ^ IV2;
        // IV1 = v[x];
        // IV2 = v[x+1];
        for (int i = 1; i <= 32; i++) {
            sum += delta;
            L += ((R << 4) + key[0]) ^ (R + sum) ^ ((R >> 5) + key[1]);
            R += ((L << 4) + key[2]) ^ (L + sum) ^ ((L >> 5) + key[3]);
        }
        v[0] = L;
        v[1] = R;
        // x+=2;
        // }
        return v;

    }

    private static long[] decipher(final long v[]) {
        int delta = 0x9e3779b9;
        int sum = delta << 5;
        int x = 0;
        int IV1 = 2, IV2 = 2;
        while (x < v.length) {
            long L = v[x];
            long R = v[x + 1];
            // int i1 = L, i2 = R;
            for (int i = 1; i <= 32; i++) {
                R -= ((L << 4) + key[2]) ^ (L + sum) ^ ((L >> 5) + key[3]);
                L -= ((R << 4) + key[0]) ^ (R + sum) ^ ((R >> 5) + key[1]);
                sum -= delta;
            }
            v[x] = L;// ^ IV1;
            v[x + 1] = R;// ^ IV2;
            // IV1 = v[x];
            // IV2 = v[x+1];
            x += 2;
        }
        return v;
    }
    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        key[0] = 0xA56BABCD;
        key[1] = 0x00000000;
        key[2] = 0xFFFFFFFF;
        key[3] = 0xABCDEF01;
        output = "";
        IV = 2;
        String test = input.getText();
        while (test.length() > 1) {
            String[] in = new String[2];
            for (int x = 0; x < 2; x++) {
                in[x] = "";
                for (int i = 0; i < 4; i++) {
                    try {
                        in[x] = in[x] + test.charAt(0);
                        test = test.substring(1);
                    } catch (Exception ie) {
                    }
                }
                System.out.print(in[x] + " ");
                if (in[x].isEmpty()) {
                    in[x] = "    ";
                }
                in[x] = toHex(in[x]);
                in[x] = toHex(in[x]);
                System.out.print(in[x] + " ");
            }
            long[] a = new long[2];
            {
                a[0] = Long.parseLong(in[0]);
                a[1] = Long.parseLong(in[1]);
            }
            a = encode(a);
            in[0] = Long.toString(a[0]);
            in[1] = Long.toString(a[1]);
            System.out.println(in[0] + " " + in[1]);
            a[0] = Long.parseLong(in[0]);
            a[1] = Long.parseLong(in[1]);
            output = output + in[0] + "*" + in[1] + "*";
            //commented section goes here
        }
        output = output + "/";
                    outputBox.setText(output);
    }//GEN-LAST:event_goActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        key[0] = 0xA56BABCD;
        key[1] = 0x00000000;
        key[2] = 0xFFFFFFFF;
        key[3] = 0xABCDEF01;
        output = "";
        IV = 2;
        String test = outputBox.getText();
        while (test.length() > 1) {
            String[] in = new String[2];
            for (int x = 0; x < 2; x++) {
                in[x] = "";
                String c = String.valueOf(test.charAt(0));
                while(!c.equals("*")) {
                    c = String.valueOf(test.charAt(0));
                    if (c.equals("/") || c.equals("*")) {
                        test = test.substring(1);
                        break;
                    }
                    try {
                        in[x] = in[x] + test.charAt(0);
                        test = test.substring(1);
                    } catch (Exception ie) {
                    }
                }
                if (in[x].isEmpty()) {
                    in[x] = "    ";
                }
                System.out.print(in[x] + " ");
            }
            long[] a = new long[2];
            {
                a[0] = Long.parseLong(in[0]);
                a[1] = Long.parseLong(in[1]);
            }
            long IV2 = a[0];
            a = decode(a);
            a[0] = a[0] ^ IV;
            a[1] = a[1] ^ IV;
            IV = IV2;
            in[0] = Long.toString(a[0]);
	    in[1] = Long.toString(a[1]);
            in[0] = fromHex(in[0]);
	    in[0] = fromHex(in[0]);
            in[1] = fromHex(in[1]);
	    in[1] = fromHex(in[1]);
            output = output + in[0] + in[1];
            System.out.println(output);
            //commented section goes here
        }
        outputBox.setText(output);
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Security.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Security.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Security.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Security.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Security().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton go;
    private javax.swing.JTextField input;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextArea outputBox;
    // End of variables declaration//GEN-END:variables
}
